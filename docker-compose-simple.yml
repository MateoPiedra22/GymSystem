# Docker Compose Ultra-Simple - Sistema de Gestión de Gimnasio v6.0

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15
    container_name: gym_postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gym_user_prod -d gym_db_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    environment:
      POSTGRES_DB: ${GYM_DB_NAME:-gym_db_prod}
      POSTGRES_USER: ${GYM_DB_USER:-gym_user_prod}
      POSTGRES_PASSWORD: ${GYM_DB_PASSWORD:-gym_secure_password_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: gym_redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: redis-server --requirepass ${GYM_REDIS_PASSWORD:-redis_secure_password_2024} --maxmemory 512mb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10 --save 60 10000 --tcp-keepalive 300
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"

  # Backend API (usando imagen pre-construida)
  backend:
    image: python:3.11-slim
    container_name: gym_backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    environment:
      - GYM_ENV=production
      - GYM_DEBUG=false
      - GYM_DB_HOST=postgres
      - GYM_DB_PORT=5432
      - GYM_DB_NAME=gym_db_prod
      - GYM_DB_USER=gym_user_prod
      - GYM_DB_PASSWORD=${GYM_DB_PASSWORD:-gym_secure_password_2024}
      - GYM_DB_SSL_MODE=prefer
      - GYM_REDIS_HOST=redis
      - GYM_REDIS_PORT=6379
      - GYM_REDIS_PASSWORD=${GYM_REDIS_PASSWORD:-redis_secure_password_2024}
      - GYM_SECRET_KEY=${GYM_SECRET_KEY:-gym_secret_key_ultra_secure_2024_64_chars_minimum}
      - GYM_JWT_SECRET_KEY=${GYM_JWT_SECRET_KEY:-gym_jwt_secret_key_ultra_secure_2024_64_chars_minimum}
      - GYM_BACKUP_KEY=${GYM_BACKUP_KEY:-gym_backup_key_secure_2024_32_chars_minimum}
      - BACKEND_PORT=8000
      - BACKEND_WORKERS=4
      - LOG_LEVEL=info
      - GYM_METRICS_PORT=9000
      - GYM_FORCE_HTTPS=true
      - GYM_SECURE_COOKIES=true
      - GYM_SAMESITE_COOKIES=lax
      - GYM_ALLOWED_HOSTS=localhost,127.0.0.1
      - GYM_CORS_ORIGINS=["https://localhost:3000","https://127.0.0.1:3000"]
      - GYM_SECURITY_HEADERS=true
      - GYM_RATE_LIMITING=true
      - GYM_RATE_LIMIT=100
      - GYM_MAX_LOGIN_ATTEMPTS=5
      - GYM_LOCKOUT_TIME=15
      - GYM_SESSION_TIMEOUT=60
      - GYM_MAX_UPLOAD_SIZE=10485760
      - GYM_MAX_REQUEST_SIZE=20971520
      - GYM_ALLOWED_EXTENSIONS=["jpg","jpeg","png","pdf"]
      - GYM_AUDIT_LOG=true
      - GYM_PROMETHEUS_METRICS=true
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    ports:
      - "8000:8000"
      - "9000:9000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    working_dir: /app
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      sh -c "apt-get update && apt-get install -y wget && 
             pip install -r requirements.txt &&
             uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4 --worker-class uvicorn.workers.UvicornWorker"

  # Frontend Web (usando imagen pre-construida)
  frontend:
    image: node:18-alpine
    container_name: gym_frontend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api
      - FRONTEND_PORT=3000
    volumes:
      - ./web:/app
      - frontend_logs:/app/logs
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    working_dir: /app
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      sh -c "apk add --no-cache wget &&
             npm install &&
             npm run dev"

  # Reverse Proxy Nginx
  nginx:
    image: nginx:1.25-alpine
    container_name: gym_nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost/nginx-health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# Volúmenes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  frontend_logs:
    driver: local
  nginx_logs:
    driver: local

# Redes - Usando red por defecto de Docker Compose 