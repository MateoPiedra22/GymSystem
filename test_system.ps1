# Script de Prueba del Sistema de Gesti√≥n de Gimnasio v6.0
# Desplegado en Docker

Write-Host "üß™ PRUEBAS DEL SISTEMA DE GESTI√ìN DE GIMNASIO v6.0" -ForegroundColor Cyan
Write-Host "==================================================" -ForegroundColor Cyan
Write-Host ""

# 1. Verificar contenedores Docker
Write-Host "1Ô∏è‚É£ Verificando contenedores Docker..." -ForegroundColor Yellow
docker-compose ps

Write-Host ""

# 2. Probar endpoints del backend
Write-Host "2Ô∏è‚É£ Probando endpoints del backend..." -ForegroundColor Yellow

Write-Host "   Health Check:" -ForegroundColor Green
try {
    $health = Invoke-RestMethod -Uri "http://localhost:8000/health" -Method GET
    Write-Host "   ‚úÖ Backend saludable - Status: $($health.status)" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå Error en health check: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "   KPIs:" -ForegroundColor Green
try {
    $kpis = Invoke-RestMethod -Uri "http://localhost:8000/api/reportes/kpis" -Method GET
    Write-Host "   ‚úÖ KPIs obtenidos - $($kpis.PSObject.Properties.Count) indicadores" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå Error obteniendo KPIs: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "   Gr√°ficos:" -ForegroundColor Green
try {
    $graficos = Invoke-RestMethod -Uri "http://localhost:8000/api/reportes/graficos" -Method GET
    Write-Host "   ‚úÖ Gr√°ficos obtenidos - $($graficos.PSObject.Properties.Count) gr√°ficos" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå Error obteniendo gr√°ficos: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# 3. Probar frontend
Write-Host "3Ô∏è‚É£ Probando frontend..." -ForegroundColor Yellow
try {
    $frontend = Invoke-WebRequest -Uri "http://localhost:3000" -Method GET
    Write-Host "   ‚úÖ Frontend funcionando - Status: $($frontend.StatusCode)" -ForegroundColor Green
    Write-Host "   üìÑ Tama√±o de respuesta: $($frontend.Content.Length) bytes" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå Error en frontend: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# 4. Verificar base de datos
Write-Host "4Ô∏è‚É£ Verificando base de datos..." -ForegroundColor Yellow
try {
    $dbHealth = Invoke-RestMethod -Uri "http://localhost:8000/health" -Method GET
    if ($dbHealth.services.database.status -eq "healthy") {
        Write-Host "   ‚úÖ Base de datos conectada - Latencia: $($dbHealth.services.database.latency_ms)ms" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Base de datos no saludable" -ForegroundColor Red
    }
} catch {
    Write-Host "   ‚ùå Error verificando BD: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# 5. Verificar Redis
Write-Host "5Ô∏è‚É£ Verificando Redis..." -ForegroundColor Yellow
try {
    $redisHealth = Invoke-RestMethod -Uri "http://localhost:8000/health" -Method GET
    if ($redisHealth.services.redis.status -eq "healthy") {
        Write-Host "   ‚úÖ Redis conectado" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Redis no saludable" -ForegroundColor Red
    }
} catch {
    Write-Host "   ‚ùå Error verificando Redis: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# 6. Resumen de puertos
Write-Host "6Ô∏è‚É£ Puertos disponibles:" -ForegroundColor Yellow
Write-Host "   üåê Frontend: http://localhost:3000" -ForegroundColor Green
Write-Host "   üîß Backend API: http://localhost:8000" -ForegroundColor Green
Write-Host "   üìä M√©tricas: http://localhost:9000" -ForegroundColor Green
Write-Host "   üóÑÔ∏è PostgreSQL: localhost:15432" -ForegroundColor Green
Write-Host "   üî¥ Redis: localhost:6379" -ForegroundColor Green

Write-Host ""

# 7. Informaci√≥n de acceso
Write-Host "7Ô∏è‚É£ Informaci√≥n de acceso:" -ForegroundColor Yellow
Write-Host "   üë§ Usuario admin: admin" -ForegroundColor Green
Write-Host "   üîë Contrase√±a: admin123" -ForegroundColor Green
Write-Host "   üìß Email: admin@gymnasium.local" -ForegroundColor Green

Write-Host ""

# 8. Funcionalidades implementadas
Write-Host "8Ô∏è‚É£ Funcionalidades implementadas:" -ForegroundColor Yellow
Write-Host "   ‚úÖ M√°s de 20 KPIs en reportes" -ForegroundColor Green
Write-Host "   ‚úÖ 12 gr√°ficos detallados" -ForegroundColor Green
Write-Host "   ‚úÖ Interfaz moderna y responsiva" -ForegroundColor Green
Write-Host "   ‚úÖ Modo oscuro" -ForegroundColor Green
Write-Host "   ‚úÖ CRUD completo de usuarios" -ForegroundColor Green
Write-Host "   ‚úÖ Gesti√≥n de asistencias" -ForegroundColor Green
Write-Host "   ‚úÖ Gesti√≥n de pagos" -ForegroundColor Green
Write-Host "   ‚úÖ Gesti√≥n de clases" -ForegroundColor Green
Write-Host "   ‚úÖ Autenticaci√≥n segura" -ForegroundColor Green
Write-Host "   ‚úÖ Base de datos optimizada" -ForegroundColor Green
Write-Host "   ‚úÖ Cache Redis" -ForegroundColor Green

Write-Host ""

Write-Host "üéâ ¬°SISTEMA DESPLEGADO Y FUNCIONANDO CORRECTAMENTE!" -ForegroundColor Cyan
Write-Host "==================================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "üí° Para acceder al sistema:" -ForegroundColor Yellow
Write-Host "   1. Abre tu navegador" -ForegroundColor White
Write-Host "   2. Ve a: http://localhost:3000" -ForegroundColor White
Write-Host "   3. Inicia sesi√≥n con: admin / admin123" -ForegroundColor White
Write-Host ""
Write-Host "üîß Para detener el sistema:" -ForegroundColor Yellow
Write-Host "   docker-compose down" -ForegroundColor White
Write-Host ""
Write-Host "üìä Para ver logs:" -ForegroundColor Yellow
Write-Host "   docker-compose logs -f [servicio]" -ForegroundColor White 