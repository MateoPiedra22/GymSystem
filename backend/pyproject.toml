[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded by ^/ will apply only to files and directories
# in the root of the project.
(
  ^/migrations/     # exclude migrations
  | ^/alembic/versions/  # exclude alembic versions
  | __pycache__
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | venv
  | build
  | dist
)
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["app"]
known_third_party = [
    "fastapi",
    "sqlalchemy",
    "pydantic",
    "alembic",
    "pytest",
    "uvicorn",
    "redis",
    "celery",
    "jose",
    "passlib",
    "email_validator",
    "python_multipart",
    "jinja2",
    "aiofiles",
    "pillow",
    "openpyxl",
    "pandas",
    "reportlab",
    "qrcode",
    "loguru",
    "slowapi",
    "starlette"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "alembic.*",
    "celery.*",
    "redis.*",
    "jose.*",
    "passlib.*",
    "email_validator.*",
    "python_multipart.*",
    "aiofiles.*",
    "PIL.*",
    "openpyxl.*",
    "pandas.*",
    "reportlab.*",
    "qrcode.*",
    "loguru.*",
    "slowapi.*",
    "phonevalidator.*",
    "validators.*",
    "unidecode.*",
    "regex.*",
    "numpy.*",
    "pytz.*"
]
ignore_missing_imports = true

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
    "W504",  # line break after binary operator
]
exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    "venv",
    ".venv",
    "build",
    "dist",
    "migrations",
    "alembic/versions"
]
max-complexity = 10
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "C",  # mccabe complexity
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "auth: marks tests as authentication tests",
    "database: marks tests that require database",
    "redis: marks tests that require Redis",
    "email: marks tests that require email functionality",
    "payment: marks tests related to payment processing",
    "membership: marks tests related to membership functionality",
    "employee: marks tests related to employee functionality",
    "class: marks tests related to class functionality",
    "exercise: marks tests related to exercise functionality",
    "routine: marks tests related to routine functionality",
    "report: marks tests related to report functionality",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:.*unclosed.*:ResourceWarning",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/alembic/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
skip_covered = false
skip_empty = false
sort = "Cover"

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "gymsystem-backend"
version = "1.0.0"
description = "GymSystem Backend API - Comprehensive gym management system"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "GymSystem Team", email = "team@gymsystem.com"},
]
keywords = ["gym", "fitness", "management", "api", "fastapi"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "email-validator>=2.0.0",
    "python-dotenv>=1.0.0",
    "jinja2>=3.1.0",
    "aiofiles>=23.0.0",
    "pillow>=10.0.0",
    "redis>=5.0.0",
    "celery>=5.3.0",
    "loguru>=0.7.0",
    "slowapi>=0.1.9",
    "fastapi-cors>=0.0.6",
    "starlette>=0.27.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.25.0",
]
production = [
    "gunicorn>=21.2.0",
    "prometheus-client>=0.17.0",
    "sentry-sdk[fastapi]>=1.32.0",
]

[project.urls]
Homepage = "https://github.com/gymsystem/backend"
Documentation = "https://docs.gymsystem.com"
Repository = "https://github.com/gymsystem/backend.git"
"Bug Tracker" = "https://github.com/gymsystem/backend/issues"

[project.scripts]
gymsystem = "app.main:main"