version: '3.8'

services:
  # FastAPI Application
  api:
    build: .
    container_name: gymsystem-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=True
      - DATABASE_URL=postgresql://postgres:gymsystem123@db:5432/gymsystem
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-super-secret-key-change-in-production
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USER=your-email@gmail.com
      - SMTP_PASSWORD=your-app-password
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173,http://127.0.0.1:3000
    depends_on:
      - db
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./backups:/app/backups
    networks:
      - gymsystem-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: gymsystem-db
    environment:
      - POSTGRES_DB=gymsystem
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=gymsystem123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - gymsystem-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d gymsystem"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: gymsystem-redis
    command: redis-server --appendonly yes --requirepass gymsystem123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - gymsystem-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Celery Worker (Background Tasks)
  celery-worker:
    build: .
    container_name: gymsystem-celery-worker
    command: celery -A app.core.celery worker --loglevel=info
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:gymsystem123@db:5432/gymsystem
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - db
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - gymsystem-network
    restart: unless-stopped

  # Celery Beat (Scheduled Tasks)
  celery-beat:
    build: .
    container_name: gymsystem-celery-beat
    command: celery -A app.core.celery beat --loglevel=info
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:gymsystem123@db:5432/gymsystem
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - db
      - redis
    volumes:
      - ./logs:/app/logs
    networks:
      - gymsystem-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: gymsystem-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - gymsystem-network
    restart: unless-stopped
    profiles:
      - production

  # pgAdmin (Database Management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: gymsystem-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@gymsystem.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - gymsystem-network
    restart: unless-stopped
    profiles:
      - development

  # Redis Commander (Redis Management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: gymsystem-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
      - REDIS_PASSWORD=gymsystem123
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - gymsystem-network
    restart: unless-stopped
    profiles:
      - development

# Networks
networks:
  gymsystem-network:
    driver: bridge
    name: gymsystem-network

# Volumes
volumes:
  postgres_data:
    driver: local
    name: gymsystem-postgres-data
  
  redis_data:
    driver: local
    name: gymsystem-redis-data
  
  pgadmin_data:
    driver: local
    name: gymsystem-pgadmin-data