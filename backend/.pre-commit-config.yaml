# Pre-commit configuration for GymSystem Backend
# This file configures pre-commit hooks to ensure code quality

repos:
  # Built-in hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-toml
      - id: check-json
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-docstring-first
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: check-symlinks
      - id: destroyed-symlinks
      - id: detect-private-key
      - id: fix-byte-order-marker
      - id: mixed-line-ending
        args: [--fix=lf]
      - id: requirements-txt-fixer
      - id: sort-simple-yaml
      - id: file-contents-sorter
        files: '^requirements.*\.txt$'
      - id: check-ast
      - id: debug-statements
      - id: name-tests-test
        args: [--pytest-test-first]
        files: tests/.*

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.9.1
    hooks:
      - id: black
        language_version: python3.11
        args: [--line-length=88]

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]

  # Linting
  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203,W503,W504]
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify
          - flake8-bandit

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.5.1
    hooks:
      - id: mypy
        args: [--ignore-missing-imports, --show-error-codes]
        additional_dependencies:
          - types-python-dateutil
          - types-requests
          - types-PyYAML
          - types-redis
          - types-setuptools

  # Security linting
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, app/]
        exclude: tests/

  # Dependency checking
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        files: requirements.*\.txt$

  # Documentation
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--convention=google]
        exclude: |
          (?x)(
              migrations/|
              alembic/|
              tests/|
              __pycache__/
          )

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.3
    hooks:
      - id: prettier
        types: [yaml]
        exclude: |
          (?x)(
              \.github/|
              docker-compose.*\.yml$
          )

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck

  # Commit message formatting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: 3.10.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # Local hooks
  - repo: local
    hooks:
      # Custom Python tests
      - id: pytest-check
        name: pytest-check
        entry: pytest
        language: system
        pass_filenames: false
        always_run: true
        args: [--tb=short, -q]
        stages: [push]

      # Environment file check
      - id: env-check
        name: Check .env file exists
        entry: bash -c 'if [ ! -f .env ]; then echo "Error: .env file not found. Copy .env.example to .env and configure it."; exit 1; fi'
        language: system
        pass_filenames: false
        always_run: true

      # Requirements check
      - id: requirements-check
        name: Check requirements.txt is sorted
        entry: bash -c 'sort requirements.txt | diff requirements.txt - || (echo "requirements.txt is not sorted. Run: sort requirements.txt -o requirements.txt"; exit 1)'
        language: system
        files: requirements\.txt$

      # Database migration check
      - id: migration-check
        name: Check for pending migrations
        entry: bash -c 'if [ -f alembic.ini ]; then alembic check 2>/dev/null || echo "Warning: There might be pending database migrations. Run: alembic upgrade head"; fi'
        language: system
        pass_filenames: false
        always_run: true
        stages: [push]

      # Code complexity check
      - id: complexity-check
        name: Check code complexity
        entry: bash -c 'python -m mccabe --min 10 app/ || echo "Warning: Some functions have high complexity"'
        language: system
        pass_filenames: false
        always_run: true

      # Import order check
      - id: import-order
        name: Check import order
        entry: isort
        language: system
        args: [--check-only, --diff]
        types: [python]

      # Line length check
      - id: line-length
        name: Check line length
        entry: bash -c 'find app/ tests/ -name "*.py" -exec wc -L {} + | awk "$1 > 88 {print $2 \" has lines longer than 88 characters\"; exit_code=1} END {exit exit_code}"'
        language: system
        pass_filenames: false
        always_run: true

# Global configuration
default_stages: [commit]
fail_fast: false
minimum_pre_commit_version: 3.0.0

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false