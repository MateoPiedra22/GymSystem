#!/usr/bin/env python3
"""
Script para generar claves secretas seguras para producci√≥n
Sistema de Gesti√≥n de Gimnasio v6.0
"""
import secrets
import string
import argparse
import json
from pathlib import Path

def generate_secure_password(length=32):
    """Generar contrase√±a segura con caracteres especiales"""
    characters = string.ascii_letters + string.digits + "!@#$%^&*()_+-=[]{}|;:,.<>?"
    # Asegurar que tenga al menos un car√°cter de cada tipo
    password = [
        secrets.choice(string.ascii_lowercase),
        secrets.choice(string.ascii_uppercase),
        secrets.choice(string.digits),
        secrets.choice("!@#$%^&*()_+-=[]{}|;:,.<>?")
    ]
    # Completar el resto
    password.extend(secrets.choice(characters) for _ in range(length - 4))
    # Mezclar la contrase√±a
    password_list = list(password)
    secrets.SystemRandom().shuffle(password_list)
    return ''.join(password_list)

def generate_secret_key(length=64):
    """Generar clave secreta segura"""
    return secrets.token_urlsafe(length)

def generate_redis_password(length=32):
    """Generar contrase√±a para Redis"""
    return generate_secure_password(length)

def generate_database_password(length=32):
    """Generar contrase√±a para base de datos"""
    return generate_secure_password(length)

def main():
    parser = argparse.ArgumentParser(description="Generar claves secretas seguras para producci√≥n")
    parser.add_argument("--output", "-o", help="Archivo de salida para las claves")
    parser.add_argument("--length", "-l", type=int, default=64, help="Longitud de las claves secretas")
    parser.add_argument("--password-length", "-p", type=int, default=32, help="Longitud de las contrase√±as")
    
    args = parser.parse_args()
    
    print("üîê Generando claves secretas seguras para producci√≥n...")
    print("=" * 60)
    
    # Generar todas las claves
    keys = {
        "GYM_SECRET_KEY": generate_secret_key(args.length),
        "GYM_JWT_SECRET_KEY": generate_secret_key(args.length),
        "GYM_BACKUP_KEY": generate_secret_key(args.length // 2),
        "GYM_DB_PASSWORD": generate_database_password(args.password_length),
        "GYM_REDIS_PASSWORD": generate_redis_password(args.password_length),
        "GRAFANA_PASSWORD": generate_secure_password(args.password_length),
        "PROMETHEUS_PASSWORD": generate_secure_password(args.password_length)
    }
    
    # Mostrar las claves generadas
    for key, value in keys.items():
        print(f"{key}: {value}")
    
    print("\n" + "=" * 60)
    print("‚úÖ Claves generadas exitosamente")
    print("\nüìù INSTRUCCIONES:")
    print("1. Copia estas claves a tu archivo de configuraci√≥n de producci√≥n")
    print("2. NUNCA compartas estas claves o las subas a control de versiones")
    print("3. Guarda estas claves en un lugar seguro (gestor de contrase√±as)")
    print("4. Rota estas claves peri√≥dicamente (cada 90 d√≠as)")
    
    # Guardar en archivo si se especifica
    if args.output:
        output_path = Path(args.output)
        
        # Crear contenido del archivo
        env_content = "# Claves secretas generadas autom√°ticamente\n"
        env_content += "# IMPORTANTE: No subir este archivo a control de versiones\n"
        env_content += "# Fecha de generaci√≥n: " + str(Path().cwd()) + "\n\n"
        
        for key, value in keys.items():
            env_content += f"{key}={value}\n"
        
        # Escribir archivo
        output_path.write_text(env_content, encoding='utf-8')
        print(f"\nüíæ Claves guardadas en: {output_path}")
        print(f"üîí Aseg√∫rate de que el archivo tenga permisos restrictivos (600)")
        
        # Tambi√©n generar archivo JSON para uso program√°tico
        json_path = output_path.with_suffix('.json')
        json_content = {
            "generated_at": str(Path().cwd()),
            "environment": "production",
            "keys": keys
        }
        json_path.write_text(json.dumps(json_content, indent=2), encoding='utf-8')
        print(f"üìÑ Archivo JSON generado: {json_path}")
    
    print("\n‚ö†Ô∏è  ADVERTENCIAS DE SEGURIDAD:")
    print("- Estas claves son para PRODUCCI√ìN √∫nicamente")
    print("- No uses estas claves en desarrollo o testing")
    print("- Cambia las claves si sospechas que han sido comprometidas")
    print("- Usa un gestor de secretos en producci√≥n (HashiCorp Vault, AWS Secrets Manager, etc.)")

if __name__ == "__main__":
    main() 