# =============================================================================
# DOCKER COMPOSE - SERVICIOS DE MONITOREO
# Sistema de Gestión de Gimnasio v6.0
# =============================================================================

version: '3.8'

# Importar configuraciones comunes
x-common-config: &common-config
  restart: unless-stopped
  networks:
    - gym_network

x-healthcheck: &healthcheck
  interval: 30s
  timeout: 10s
  retries: 3

services:
  # ==========================================================================
  # MONITOREO PROMETHEUS
  # ==========================================================================
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: gym_prometheus
    <<: *common-config
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus/data'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus/data
    ports:
      - "${PROMETHEUS_PORT}:9090"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      <<: *healthcheck
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ==========================================================================
  # DASHBOARD GRAFANA
  # ==========================================================================
  grafana:
    image: grafana/grafana:10.0.0
    container_name: gym_grafana
    <<: *common-config
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT}:3000"
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      <<: *healthcheck
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # ==========================================================================
  # ALERTMANAGER
  # ==========================================================================
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: gym_alertmanager
    <<: *common-config
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager/data'
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager:ro
      - alertmanager_data:/alertmanager/data
    ports:
      - "9093:9093"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      <<: *healthcheck
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # ==========================================================================
  # NODE EXPORTER (MÉTRICAS DEL SISTEMA)
  # ==========================================================================
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: gym_node_exporter
    <<: *common-config
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /:/host:ro,rslave
    ports:
      - "9100:9100"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      <<: *healthcheck
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

  # ==========================================================================
  # CADVISOR (MÉTRICAS DE CONTENEDORES)
  # ==========================================================================
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: gym_cadvisor
    <<: *common-config
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      <<: *healthcheck
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # ==========================================================================
  # BLACKBOX EXPORTER (MONITOREO DE UPTIME)
  # ==========================================================================
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: gym_blackbox_exporter
    <<: *common-config
    command:
      - '--config.file=/etc/blackbox_exporter/blackbox.yml'
    volumes:
      - ./monitoring/blackbox:/etc/blackbox_exporter:ro
    ports:
      - "9115:9115"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9115/-/healthy"]
      <<: *healthcheck
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

# =============================================================================
# VOLÚMENES
# =============================================================================
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local

# =============================================================================
# REDES
# =============================================================================
networks:
  gym_network:
    external: true 