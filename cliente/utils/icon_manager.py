"""
Sistema de gesti√≥n de √≠conos para el cliente desktop
Proporciona √≠conos consistentes en toda la aplicaci√≥n
"""

import os
from typing import Dict, Optional
from PyQt6.QtGui import QIcon, QPixmap, QPainter, QColor
from PyQt6.QtCore import QSize, Qt
from PyQt6.QtWidgets import QWidget

class IconManager:
    """
    Gestor centralizado de √≠conos para la aplicaci√≥n desktop
    Proporciona √≠conos consistentes y gesti√≥n de temas
    """
    
    def __init__(self):
        self.icon_cache: Dict[str, QIcon] = {}
        self.icon_size = 24
        self.icon_color = QColor(60, 60, 60)  # Color por defecto
        self.theme = "light"  # light o dark
        
        # Definir colores por tema
        self.theme_colors = {
            "light": {
                "primary": QColor(59, 130, 246),      # Blue-500
                "success": QColor(16, 185, 129),      # Green-500
                "warning": QColor(245, 158, 11),      # Yellow-500
                "danger": QColor(239, 68, 68),        # Red-500
                "info": QColor(6, 182, 212),          # Cyan-500
                "secondary": QColor(107, 114, 128),   # Gray-500
                "text": QColor(60, 60, 60)            # Texto oscuro
            },
            "dark": {
                "primary": QColor(96, 165, 250),      # Blue-400
                "success": QColor(52, 211, 153),      # Green-400
                "warning": QColor(251, 191, 36),      # Yellow-400
                "danger": QColor(248, 113, 113),      # Red-400
                "info": QColor(34, 211, 238),         # Cyan-400
                "secondary": QColor(156, 163, 175),   # Gray-400
                "text": QColor(240, 240, 240)         # Texto claro
            }
        }
    
    def set_theme(self, theme: str):
        """Cambia el tema de √≠conos (light/dark)"""
        if theme in self.theme_colors:
            self.theme = theme
            self.icon_cache.clear()  # Limpiar cach√© para regenerar √≠conos
    
    def set_default_size(self, size: int):
        """Establece el tama√±o por defecto de √≠conos"""
        self.icon_size = size
    
    def get_color(self, color_name: str) -> QColor:
        """Obtiene un color del tema actual"""
        return self.theme_colors[self.theme].get(color_name, self.theme_colors[self.theme]["text"])
    
    def create_text_icon(self, text: str, color_name: str = "text", size: Optional[int] = None) -> QIcon:
        """
        Crea un √≠cono usando texto (emoji o caracteres especiales)
        √ötil para √≠conos simples cuando no tenemos archivos de imagen
        """
        icon_size = size or self.icon_size
        color = self.get_color(color_name)
        
        # Crear pixmap
        pixmap = QPixmap(icon_size, icon_size)
        pixmap.fill(Qt.GlobalColor.transparent)
        
        # Dibujar texto
        painter = QPainter(pixmap)
        painter.setRenderHint(QPainter.RenderHint.Antialiasing)
        
        # Configurar fuente
        font = painter.font()
        font.setPixelSize(int(icon_size * 0.7))
        font.setBold(True)
        painter.setFont(font)
        painter.setPen(color)
        
        # Dibujar texto centrado
        painter.drawText(pixmap.rect(), Qt.AlignmentFlag.AlignCenter, text)
        painter.end()
        
        return QIcon(pixmap)
    
    def create_colored_icon(self, icon_name: str, color_name: str = "text", size: Optional[int] = None) -> QIcon:
        """
        Crea un √≠cono coloreado desde un archivo base
        Si no existe el archivo, usa un √≠cono de texto como fallback
        """
        icon_size = size or self.icon_size
        cache_key = f"{icon_name}_{color_name}_{icon_size}_{self.theme}"
        
        # Verificar cach√©
        if cache_key in self.icon_cache:
            return self.icon_cache[cache_key]
        
        # Intentar cargar desde archivo
        icon_path = os.path.join("assets", "icons", f"{icon_name}.svg")
        if os.path.exists(icon_path):
            icon = QIcon(icon_path)
        else:
            # Fallback: usar emoji/texto
            fallback_text = self.get_fallback_text(icon_name)
            icon = self.create_text_icon(fallback_text, color_name, size)
        
        # Colorear el √≠cono si es necesario
        if color_name != "text":
            icon = self.colorize_icon(icon, self.get_color(color_name), icon_size)
        
        # Guardar en cach√©
        self.icon_cache[cache_key] = icon
        return icon
    
    def colorize_icon(self, icon: QIcon, color: QColor, size: int) -> QIcon:
        """Coloriza un √≠cono con el color especificado"""
        pixmap = icon.pixmap(QSize(size, size))
        
        # Crear nuevo pixmap coloreado
        colored_pixmap = QPixmap(pixmap.size())
        colored_pixmap.fill(Qt.GlobalColor.transparent)
        
        painter = QPainter(colored_pixmap)
        painter.setRenderHint(QPainter.RenderHint.Antialiasing)
        
        # Dibujar √≠cono original
        painter.drawPixmap(0, 0, pixmap)
        
        # Aplicar color
        painter.setCompositionMode(QPainter.CompositionMode.CompositionMode_SourceIn)
        painter.fillRect(colored_pixmap.rect(), color)
        painter.end()
        
        return QIcon(colored_pixmap)
    
    def get_fallback_text(self, icon_name: str) -> str:
        """
        Mapeo de nombres de √≠conos a texto/emoji de fallback
        """
        fallback_map = {
            # Navegaci√≥n
            "home": "üè†",
            "dashboard": "üìä",
            "users": "üë•",
            "calendar": "üìÖ",
            "routines": "üí™",
            "payments": "üí≥",
            "attendance": "‚úÖ",
            "settings": "‚öôÔ∏è",
            "reports": "üìã",
            
            # Acciones
            "add": "‚ûï",
            "edit": "‚úèÔ∏è",
            "delete": "üóëÔ∏è",
            "search": "üîç",
            "save": "üíæ",
            "copy": "üìã",
            "share": "üì§",
            "download": "‚¨áÔ∏è",
            "upload": "‚¨ÜÔ∏è",
            "refresh": "üîÑ",
            "view": "üëÅÔ∏è",
            "hide": "üôà",
            "menu": "‚ò∞",
            "close": "‚ùå",
            
            # Estados
            "success": "‚úÖ",
            "error": "‚ùå",
            "warning": "‚ö†Ô∏è",
            "info": "‚ÑπÔ∏è",
            "loading": "‚è≥",
            "star": "‚≠ê",
            "heart": "‚ù§Ô∏è",
            "shield": "üõ°Ô∏è",
            "award": "üèÜ",
            "trophy": "üèÜ",
            
            # Analytics
            "trend_up": "üìà",
            "trend_down": "üìâ",
            "target": "üéØ",
            "activity": "üìä",
            "chart": "üìä",
            
            # Fitness
            "dumbbell": "üèãÔ∏è",
            "energy": "‚ö°",
            "weight": "‚öñÔ∏è",
            "timer": "‚è∞",
            "play": "‚ñ∂Ô∏è",
            "pause": "‚è∏Ô∏è",
            "stop": "‚èπÔ∏è",
            
            # Finanzas
            "dollar": "üí∞",
            "card": "üí≥",
            "receipt": "üßæ",
            "coins": "ü™ô",
            
            # Usuario
            "user": "üë§",
            "profile": "üë§",
            "notification": "üîî",
            "email": "üìß",
            "phone": "üìû",
            
            # Tiempo
            "clock": "üïê",
            "alarm": "‚è∞",
            "stopwatch": "‚è±Ô∏è",
            
            # Documentos
            "file": "üìÑ",
            "folder": "üìÅ",
            "archive": "üì¶",
            "print": "üñ®Ô∏è",
            
            # Configuraci√≥n
            "config": "‚öôÔ∏è",
            "tools": "üîß",
            "palette": "üé®",
            "desktop": "üñ•Ô∏è",
            "mobile": "üì±",
            
            # Conexi√≥n
            "wifi": "üì∂",
            "server": "üñ•Ô∏è",
            "database": "üóÑÔ∏è",
            "cloud": "‚òÅÔ∏è",
            
            # Tema
            "sun": "‚òÄÔ∏è",
            "moon": "üåô",
            
            # Utilidades
            "location": "üìç",
            "camera": "üì∑",
            "key": "üîë",
            "tag": "üè∑Ô∏è",
            "help": "‚ùì",
        }
        
        return fallback_map.get(icon_name, "‚ö™")  # C√≠rculo blanco como √∫ltimo fallback
    
    # M√©todos de conveniencia para obtener √≠conos espec√≠ficos
    def navigation_icon(self, name: str, color: str = "primary") -> QIcon:
        """Obtiene √≠conos de navegaci√≥n"""
        return self.create_colored_icon(name, color)
    
    def action_icon(self, name: str, color: str = "text") -> QIcon:
        """Obtiene √≠conos de acciones"""
        return self.create_colored_icon(name, color)
    
    def status_icon(self, name: str, color: str = "text") -> QIcon:
        """Obtiene √≠conos de estado"""
        color_map = {
            "success": "success",
            "error": "danger",
            "warning": "warning",
            "info": "info"
        }
        icon_color = color_map.get(name, color)
        return self.create_colored_icon(name, icon_color)
    
    def fitness_icon(self, name: str, color: str = "primary") -> QIcon:
        """Obtiene √≠conos relacionados con fitness"""
        return self.create_colored_icon(name, color)
    
    def finance_icon(self, name: str, color: str = "success") -> QIcon:
        """Obtiene √≠conos relacionados con finanzas"""
        return self.create_colored_icon(name, color)

# Instancia global del gestor de √≠conos
icon_manager = IconManager()

# Funciones de conveniencia para usar en toda la aplicaci√≥n
def get_icon(name: str, color: str = "text", size: Optional[int] = None) -> QIcon:
    """Funci√≥n de conveniencia para obtener cualquier √≠cono"""
    return icon_manager.create_colored_icon(name, color, size)

def get_navigation_icon(name: str) -> QIcon:
    """Obtiene √≠conos de navegaci√≥n con color primario"""
    return icon_manager.navigation_icon(name)

def get_action_icon(name: str, color: str = "text") -> QIcon:
    """Obtiene √≠conos de acciones"""
    return icon_manager.action_icon(name, color)

def get_status_icon(name: str) -> QIcon:
    """Obtiene √≠conos de estado con colores apropiados"""
    return icon_manager.status_icon(name)

def set_icon_theme(theme: str):
    """Cambia el tema global de √≠conos"""
    icon_manager.set_theme(theme)

def set_icon_size(size: int):
    """Establece el tama√±o por defecto de √≠conos"""
    icon_manager.set_default_size(size) 